"""init

Revision ID: 64b051264f32
Revises: 
Create Date: 2023-05-13 14:26:59.085018

"""
import sqlalchemy as sa
from alembic import op

from core import sqltype
from core.sqltype import UUID

# revision identifiers, used by Alembic.
revision = '64b051264f32'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('account_integrates',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('account_id', UUID(), nullable=False, comment='关联账号的ID'),
                    sa.Column('provider', sa.String(length=16), nullable=False, comment='提供者或服务商'),
                    sa.Column('open_id', sa.String(length=255), nullable=False, comment='来自服务提供者的开放ID'),
                    sa.Column('encrypted_token', sa.String(length=255), nullable=False,
                              comment='加密令牌，用于安全验证'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='记录创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='记录最后更新时间'),
                    sa.PrimaryKeyConstraint('id', name='account_integrate_pkey'),
                    sa.UniqueConstraint('account_id', 'provider', name='unq_account_provider'),
                    sa.UniqueConstraint('provider', 'open_id', name='unq_provider_open_id')
                    )
    op.create_table('accounts',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名字'),
                    sa.Column('email', sa.String(length=255), nullable=False, comment='邮箱'),
                    sa.Column('password', sa.String(length=255), nullable=True, comment='密码'),
                    sa.Column('password_salt', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='密码加盐'),
                    sa.Column('avatar', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='头像'),
                    sa.Column('interface_language', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='语言'),
                    sa.Column('interface_theme', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='主题'),
                    sa.Column('timezone', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='时区'),
                    sa.Column('last_login_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='最后登录时间'),
                    sa.Column('last_login_ip', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text()),
                    sa.Column('status', sa.String(length=16), server_default=sa.text("'active'"),
                              nullable=False),
                    sa.Column('initialized_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='初始化时间'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='account_pkey')
                    )
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.create_index('idx_account_email', ['email'], unique=False)

    op.create_table('api_requests',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('api_token_id', UUID(), nullable=False, comment='API token ID'),
                    sa.Column('path', sa.String(length=255), nullable=False, comment='请求路径'),
                    sa.Column('request', sa.String(length=4096), nullable=True, server_default=sa.text("''"),
                              comment='请求内容'),
                    sa.Column('response', sa.String(length=4096), nullable=True, server_default=sa.text("''"),
                              comment='响应内容'),
                    sa.Column('ip', sa.String(length=255), nullable=False, server_default=sa.text("''"),
                              comment='IP地址'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='api_request_pkey')
                    )
    with op.batch_alter_table('api_requests', schema=None) as batch_op:
        batch_op.create_index('idx_api_request_token', ['tenant_id', 'api_token_id'], unique=False)

    op.create_table('api_tokens',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=True, comment='app id'),
                    sa.Column('dataset_id', UUID(), nullable=True, server_default=sa.text("''"), comment='数据集id'),
                    sa.Column('type', sa.String(length=16), nullable=False, comment='类型'),
                    sa.Column('token', sa.String(length=255), nullable=False, comment='token'),
                    sa.Column('last_used_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='最后使用时间'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='api_token_pkey')
                    )
    with op.batch_alter_table('api_tokens', schema=None) as batch_op:
        batch_op.create_index('idx_api_token_app_id_type', ['app_id', 'type'], unique=False)
        batch_op.create_index('idx_api_token_token', ['token', 'type'], unique=False)

    op.create_table('app_dataset_joins',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='app_dataset_join_pkey')
                    )
    with op.batch_alter_table('app_dataset_joins', schema=None) as batch_op:
        batch_op.create_index('idx_app_dataset_join_app_dataset', ['dataset_id', 'app_id'], unique=False)

    op.create_table('app_model_configs',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('provider', sa.String(length=255), nullable=False, comment='模型提供方'),
                    sa.Column('model_id', sa.String(length=255), nullable=False, comment='模型ID'),
                    sa.Column('configs', sa.JSON(), nullable=False, comment='配置（json）'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.Column('opening_statement', sa.JSON(), nullable=True, comment='开放状态'),
                    sa.Column('suggested_questions', sa.JSON(), nullable=True, comment='建议问题'),
                    sa.Column('suggested_questions_after_answer', sa.JSON(), nullable=True, comment='回答后建议的问题'),
                    sa.Column('more_like_this', sa.JSON(), nullable=True, comment='更多类似的内容'),
                    sa.Column('model', sa.JSON(), nullable=True, comment='模型配置'),
                    sa.Column('user_input_form', sa.JSON(), nullable=True, comment='用户输入表单'),
                    sa.Column('pre_prompt', sa.JSON(), nullable=True, comment='预置提示'),
                    sa.Column('agent_mode', sa.JSON(), nullable=True, comment='代理模式'),
                    sa.PrimaryKeyConstraint('id', name='app_model_config_pkey')
                    )
    with op.batch_alter_table('app_model_configs', schema=None) as batch_op:
        batch_op.create_index('idx_app_app_id', ['app_id'], unique=False)

    op.create_table('apps',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名字'),
                    sa.Column('mode', sa.String(length=255), nullable=False, comment='模式'),
                    sa.Column('icon', sa.String(length=255), nullable=True, comment='图标'),
                    sa.Column('icon_background', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='背景图标'),
                    sa.Column('app_model_config_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='模型配置id'),
                    sa.Column('status', sa.String(length=255), server_default=sa.text("'normal'"),
                              nullable=False, comment='状态'),
                    sa.Column('enable_site', sa.Boolean(), nullable=False, comment='启用'),
                    sa.Column('enable_api', sa.Boolean(), nullable=False, comment='启用api'),
                    sa.Column('api_rpm', sa.Integer(), nullable=False, comment='api rpm'),
                    sa.Column('api_rph', sa.Integer(), nullable=False, comment='api rph'),
                    sa.Column('is_demo', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否是demo'),
                    sa.Column('is_public', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否是公开的'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='app_pkey')
                    )
    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.create_index('idx_app_tenant_id', ['tenant_id'], unique=False)

    op.create_table('celery_taskmeta',
                    sa.Column('id', sa.Integer(), nullable=False, autoincrement=True),
                    sa.Column('task_id', sa.String(length=155), nullable=True),
                    sa.Column('status', sa.String(length=50), nullable=True),
                    sa.Column('result', sa.PickleType(), nullable=True),
                    sa.Column('date_done', sa.DateTime(), nullable=True),
                    sa.Column('traceback', sa.String(length=4096), nullable=True),
                    sa.Column('name', sa.String(length=155), nullable=True),
                    sa.Column('args', sa.LargeBinary(), nullable=True),
                    sa.Column('kwargs', sa.LargeBinary(), nullable=True),
                    sa.Column('worker', sa.String(length=155), nullable=True),
                    sa.Column('retries', sa.Integer(), nullable=True),
                    sa.Column('queue', sa.String(length=155), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('task_id')
                    )
    op.create_table('celery_tasksetmeta',
                    sa.Column('id', sa.Integer(), nullable=False, autoincrement=True),
                    sa.Column('taskset_id', sa.String(length=155), nullable=True),
                    sa.Column('result', sa.PickleType(), nullable=True),
                    sa.Column('date_done', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('taskset_id')
                    )
    op.create_table('conversations',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('app_model_config_id', UUID(), nullable=False, comment='app模型配置id'),
                    sa.Column('model_provider', sa.String(length=255), nullable=False, comment='模型提供方'),
                    sa.Column('override_model_configs', sa.JSON(), nullable=True, comment='覆盖模型配置'),
                    sa.Column('model_id', sa.String(length=255), nullable=False, comment='模型id'),
                    sa.Column('mode', sa.String(length=255), nullable=False, comment='模式'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名称'),
                    sa.Column('summary', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='摘要'),
                    sa.Column('inputs', sa.JSON(), nullable=True, comment='输入'),
                    sa.Column('introduction', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='介绍'),
                    sa.Column('system_instruction', sa.String(length=2048), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='系统提示'),
                    sa.Column('system_instruction_tokens', sa.Integer(), server_default=sa.text('0'), nullable=False,
                              comment='系统指令令牌数'),
                    sa.Column('status', sa.String(length=255), nullable=False, server_default=sa.text('"normal"'),
                              comment='状态'),
                    sa.Column('from_source', sa.String(length=255), nullable=False, server_default=sqltype.empty_text(),
                              comment='来源'),
                    sa.Column('from_end_user_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='终端用户id'),
                    sa.Column('from_account_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='来源账号id'),
                    sa.Column('read_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='读取时间'),
                    sa.Column('read_account_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='读取账号id'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='conversation_pkey')
                    )
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.create_index('idx_conversation_app_from_user', ['app_id', 'from_source', 'from_end_user_id'],
                              unique=False)

    op.create_table('dataset_keyword_tables',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库id'),
                    sa.Column('keyword_table', sa.String(length=4096), nullable=False,
                              server_default=sqltype.empty_text(),
                              comment='关键词表'),
                    sa.PrimaryKeyConstraint('id', name='dataset_keyword_table_pkey'),
                    sa.UniqueConstraint('dataset_id')
                    )
    with op.batch_alter_table('dataset_keyword_tables', schema=None) as batch_op:
        batch_op.create_index('idx_dataset_keyword_table_dataset_id', ['dataset_id'], unique=False)

    op.create_table('dataset_process_rules',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库ID'),
                    sa.Column('mode', sa.String(length=255), server_default=sa.text("'automatic'"),
                              nullable=False, comment='模式'),
                    sa.Column('rules', sa.String(length=4096), nullable=True, server_default=sqltype.empty_text(),
                              comment='规则'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建者'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='dataset_process_rule_pkey')
                    )
    with op.batch_alter_table('dataset_process_rules', schema=None) as batch_op:
        batch_op.create_index('idx_dataset_process_rule_dataset_id', ['dataset_id'], unique=False)

    op.create_table('dataset_queries',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库ID'),
                    sa.Column('content', sa.String(length=2048), nullable=False, comment='查询内容'),
                    sa.Column('source', sa.String(length=255), nullable=False, server_default=sqltype.empty_text(),
                              comment='来源'),
                    sa.Column('source_app_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='来源appid'),
                    sa.Column('created_by_role', sa.String(length=64), nullable=False,
                              server_default=sqltype.empty_text(), comment='创建角色'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建人'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False,
                              comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='dataset_query_pkey')
                    )
    with op.batch_alter_table('dataset_queries', schema=None) as batch_op:
        batch_op.create_index('idx_dataset_query_dataset_id', ['dataset_id'], unique=False)

    op.create_table('datasets',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名字'),
                    sa.Column('description', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='描述'),
                    sa.Column('provider', sa.String(length=255), server_default=sa.text("'vendor'"),
                              nullable=False, comment='提供商'),
                    sa.Column('permission', sa.String(length=255),
                              server_default=sa.text("'only_me'"), nullable=False, comment='权限'),
                    sa.Column('data_source_type', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='数据源类型'),
                    sa.Column('indexing_technique', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='索引技术'),
                    sa.Column('index_struct', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='索引结构'),
                    sa.Column('created_by', UUID(), nullable=False, server_default=sqltype.empty_text(),
                              comment='创建人'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='更新人'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='dataset_pkey')
                    )
    with op.batch_alter_table('datasets', schema=None) as batch_op:
        batch_op.create_index('idx_dataset_tenant', ['tenant_id'], unique=False)

    op.create_table('dify_setups',
                    sa.Column('version', sa.String(length=255), nullable=False, comment='版本号'),
                    sa.Column('setup_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('version', name='dify_setup_pkey')
                    )
    op.create_table('document_segments',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库ID'),
                    sa.Column('document_id', UUID(), nullable=False, comment='文档ID'),
                    sa.Column('position', sa.Integer(), nullable=False, comment='位置'),
                    sa.Column('content', sa.String(length=4096), nullable=False, comment='内容'),
                    sa.Column('word_count', sa.Integer(), nullable=False, comment='词数'),
                    sa.Column('tokens', sa.Integer(), nullable=False, server_default=sa.text('0'), comment='token数'),
                    sa.Column('keywords', sa.JSON(), nullable=True, comment='关键词'),
                    sa.Column('index_node_id', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='索引节点ID'),
                    sa.Column('index_node_hash', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='索引节点哈希'),
                    sa.Column('hit_count', sa.Integer(), nullable=False, server_default=sa.text('0'), comment='命中数'),
                    sa.Column('enabled', sa.Boolean(), server_default=sa.text('true'), nullable=False,
                              comment='启用状态'),
                    sa.Column('disabled_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='失效时间'),
                    sa.Column('disabled_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='失效人'),
                    sa.Column('status', sa.String(length=255), server_default=sa.text("'waiting'"),
                              nullable=False, comment='状态'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建人'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('indexing_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='索引时间'),
                    sa.Column('completed_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='完成时间'),
                    sa.Column('error', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='错误'),
                    sa.Column('stopped_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='停止时间'),
                    sa.PrimaryKeyConstraint('id', name='document_segment_pkey')
                    )
    with op.batch_alter_table('document_segments', schema=None) as batch_op:
        batch_op.create_index('idx_document_segment_dataset_id', ['dataset_id'], unique=False)
        batch_op.create_index('idx_document_segment_dataset_node', ['dataset_id', 'index_node_id'], unique=False)
        batch_op.create_index('idx_document_segment_document_id', ['document_id'], unique=False)
        batch_op.create_index('idx_document_segment_tenant_dataset', ['dataset_id', 'tenant_id'], unique=False)
        batch_op.create_index('idx_document_segment_tenant_document', ['document_id', 'tenant_id'], unique=False)

    op.create_table('documents',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('dataset_id', UUID(), nullable=False, comment='知识库ID'),
                    sa.Column('position', sa.Integer(), nullable=False, comment='位置'),
                    sa.Column('data_source_type', sa.String(length=255), nullable=False, comment='数据源类型'),
                    sa.Column('data_source_info', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='数据源信息'),
                    sa.Column('dataset_process_rule_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='知识库处理规则ID'),
                    sa.Column('batch', sa.String(length=255), nullable=False, comment='批次'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名字'),
                    sa.Column('created_from', sa.String(length=255), nullable=False, comment='创建来源'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建者'),
                    sa.Column('created_api_request_id', UUID(), nullable=True, comment='创建API请求ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('processing_started_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='处理开始时间'),
                    sa.Column('file_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='文件ID'),
                    sa.Column('word_count', sa.Integer(), nullable=True, server_default=sa.text('0'), comment='词数'),
                    sa.Column('parsing_completed_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='解析完成时间'),
                    sa.Column('cleaning_completed_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='清理完成时间'),
                    sa.Column('splitting_completed_at', sa.DateTime(), nullable=True,
                              server_default=sqltype.invalid_time(), comment='分割完成时间'),
                    sa.Column('tokens', sa.Integer(), nullable=True, server_default=sa.text('0'), comment='token数'),
                    sa.Column('indexing_latency', sa.Float(), nullable=True, server_default=sa.text('0'),
                              comment='索引延迟'),
                    sa.Column('completed_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='完成时间'),
                    sa.Column('is_paused', sa.Boolean(), server_default=sa.text('false'), nullable=True,
                              comment='是否暂停'),
                    sa.Column('paused_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='暂停操作者'),
                    sa.Column('paused_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='暂停时间'),
                    sa.Column('error', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='错误'),
                    sa.Column('stopped_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='停止时间'),
                    sa.Column('indexing_status', sa.String(length=255, ),
                              server_default=sa.text("'waiting'"), nullable=False, comment='索引状态'),
                    sa.Column('enabled', sa.Boolean(), server_default=sa.text('true'), nullable=False,
                              comment='是否启用'),
                    sa.Column('disabled_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='禁用时间'),
                    sa.Column('disabled_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='禁用人'),
                    sa.Column('archived', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否存档'),
                    sa.Column('archived_reason', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='存档原因'),
                    sa.Column('archived_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='存档人'),
                    sa.Column('archived_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='存档时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.Column('doc_type', sa.String(length=40), nullable=True, server_default=sqltype.empty_text(),
                              comment='文档类型'),
                    sa.Column('doc_metadata', sa.JSON(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name='document_pkey')
                    )
    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.create_index('idx_document_dataset_id', ['dataset_id'], unique=False)
        batch_op.create_index('idx_document_is_paused', ['is_paused'], unique=False)

    op.create_table('embeddings',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('hash', sa.String(length=64), nullable=False, comment='hash'),
                    sa.Column('embedding', sa.LargeBinary(), nullable=False, comment='嵌入'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='embedding_pkey'),
                    )
    op.create_table('end_users',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('app_id', UUID(), nullable=True, server_default=sqltype.empty_text(), comment='应用ID'),
                    sa.Column('type', sa.String(length=255), nullable=False, comment='类型'),
                    sa.Column('external_user_id', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='外部用户ID'),
                    sa.Column('name', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='名字'),
                    sa.Column('is_anonymous', sa.Boolean(), server_default=sa.text('true'), nullable=False,
                              comment='是否匿名'),
                    sa.Column('session_id', sa.String(length=255), nullable=False, comment='会话ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='end_user_pkey')
                    )
    with op.batch_alter_table('end_users', schema=None) as batch_op:
        batch_op.create_index('idx_end_user_session_id', ['session_id', 'type'], unique=False)
        batch_op.create_index('idx_end_user_tenant_session_id', ['tenant_id', 'session_id', 'type'], unique=False)

    op.create_table('installed_apps',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('app_owner_tenant_id', UUID(), nullable=False, comment='应用拥有者的租户ID'),
                    sa.Column('position', sa.Integer(), nullable=False, server_default=sa.text('0'),
                              comment='应用拥有者的租户ID'),
                    sa.Column('is_pinned', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否固定'),
                    sa.Column('last_used_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='最后使用时间'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='installed_app_pkey'),
                    sa.UniqueConstraint('tenant_id', 'app_id', name='unq_tenant_app')
                    )
    with op.batch_alter_table('installed_apps', schema=None) as batch_op:
        batch_op.create_index('idx_installed_app_app_id', ['app_id'], unique=False)
        batch_op.create_index('idx_installed_app_tenant_id', ['tenant_id'], unique=False)

    op.create_table('invitation_codes',
                    sa.Column('id', sa.Integer(), nullable=False, comment='ID'),
                    sa.Column('batch', sa.String(length=255), nullable=False, comment='批次'),
                    sa.Column('code', sa.String(length=32), nullable=False, comment='邀请码'),
                    sa.Column('status', sa.String(length=16), server_default=sa.text("'unused'"),
                              nullable=False, comment='邀请码状态'),
                    sa.Column('used_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='使用时间'),
                    sa.Column('used_by_tenant_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='被哪个租户使用'),
                    sa.Column('used_by_account_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='被哪个帐户使用'),
                    sa.Column('deprecated_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='废弃时间'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='invitation_code_pkey')
                    )
    with op.batch_alter_table('invitation_codes', schema=None) as batch_op:
        batch_op.create_index('idx_invitation_codes_batch', ['batch'], unique=False)
        batch_op.create_index('idx_invitation_codes_code', ['code', 'status'], unique=False)

    op.create_table('message_agent_thoughts',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('message_id', UUID(), nullable=False, comment='消息ID'),
                    sa.Column('message_chain_id', UUID(), nullable=False, comment='消息链ID'),
                    sa.Column('position', sa.Integer(), nullable=False, comment='位置'),
                    sa.Column('thought', sa.String(length=4096), nullable=True, server_default=sqltype.empty_text(),
                              comment='想法'),
                    sa.Column('tool', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='工具'),
                    sa.Column('tool_input', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='工具输入'),
                    sa.Column('observation', sa.String(length=4096), nullable=True, server_default=sqltype.empty_text(),
                              comment='观察'),
                    sa.Column('tool_process_data', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='工具处理数据'),
                    sa.Column('message', sa.String(length=2048), nullable=True, server_default=sqltype.empty_text(),
                              comment='消息'),
                    sa.Column('message_token', sa.Integer(), nullable=True, server_default=sa.text('0'),
                              comment='消息token数'),
                    sa.Column('message_unit_price', sa.Numeric(), nullable=True, server_default=sa.text('0'),
                              comment='消息单价'),
                    sa.Column('answer', sa.String(length=2048), nullable=True, server_default=sqltype.empty_text(),
                              comment='回答'),
                    sa.Column('answer_token', sa.Integer(), nullable=True, server_default=sa.text('0'),
                              comment='回答token数'),
                    sa.Column('answer_unit_price', sa.Numeric(), nullable=True, server_default=sa.text('0'),
                              comment='回答单价'),
                    sa.Column('tokens', sa.Integer(), nullable=True, server_default=sa.text('0'), comment='token数'),
                    sa.Column('total_price', sa.Numeric(), nullable=True, server_default=sa.text('0'),
                              comment='总价格'),
                    sa.Column('currency', sa.String(length=32), nullable=True, server_default=sqltype.empty_text(),
                              comment='货币'),
                    sa.Column('latency', sa.Float(), nullable=True, server_default=sa.text('0'), comment='延迟'),
                    sa.Column('created_by_role', sa.String(length=64), nullable=False,
                              server_default=sqltype.empty_text(), comment='创建角色'),
                    sa.Column('created_by', UUID(), nullable=False, server_default=sqltype.empty_text(),
                              comment='创建人'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False,
                              comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='message_agent_thought_pkey')
                    )
    with op.batch_alter_table('message_agent_thoughts', schema=None) as batch_op:
        batch_op.create_index('idx_message_agent_thought_message_chain_id', ['message_chain_id'], unique=False)
        batch_op.create_index('idx_message_agent_thought_message_id', ['message_id'], unique=False)

    op.create_table('message_chains',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('message_id', UUID(), nullable=False, comment='消息ID'),
                    sa.Column('type', sa.String(length=255), nullable=False, comment='类型'),
                    sa.Column('input', sa.JSON(), nullable=True, comment='输入'),
                    sa.Column('output', sa.JSON(), nullable=True, comment='输出'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False,
                              comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='message_chain_pkey')
                    )
    with op.batch_alter_table('message_chains', schema=None) as batch_op:
        batch_op.create_index('idx_message_chain_message_id', ['message_id'], unique=False)

    op.create_table('message_feedbacks',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('conversation_id', UUID(), nullable=False, comment='对话ID'),
                    sa.Column('message_id', UUID(), nullable=False, comment='消息ID'),
                    sa.Column('rating', sa.String(length=255), nullable=False, server_default=sqltype.empty_text(),
                              comment='评级'),
                    sa.Column('content', sa.String(length=4096), nullable=True, server_default=sqltype.empty_text(),
                              comment='内容'),
                    sa.Column('from_source', sa.String(length=255), nullable=False, server_default=sqltype.empty_text(),
                              comment='来源'),
                    sa.Column('from_end_user_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='终端用户id'),
                    sa.Column('from_account_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='账号id'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='message_feedback_pkey')
                    )
    with op.batch_alter_table('message_feedbacks', schema=None) as batch_op:
        batch_op.create_index('idx_message_feedback_app', ['app_id'], unique=False)
        batch_op.create_index('idx_message_feedback_conversation', ['conversation_id', 'from_source', 'rating'],
                              unique=False)
        batch_op.create_index('idx_message_feedback_message', ['message_id', 'from_source'], unique=False)

    op.create_table('operation_logs',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('account_id', UUID(), nullable=False, comment='账号ID'),
                    sa.Column('action', sa.String(length=255), nullable=False, comment='操作动作'),
                    sa.Column('content', sa.JSON(), nullable=True, comment='操作内容'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('created_ip', sa.String(length=255), nullable=False, server_default=sqltype.empty_text(),
                              comment='创建IP'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='operation_log_pkey')
                    )
    with op.batch_alter_table('operation_logs', schema=None) as batch_op:
        batch_op.create_index('idx_operation_log_account_action', ['tenant_id', 'account_id', 'action'],
                              unique=False)

    op.create_table('pinned_conversations',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('conversation_id', UUID(), nullable=False, comment='对话ID'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建者ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='pinned_conversation_pkey')
                    )
    with op.batch_alter_table('pinned_conversations', schema=None) as batch_op:
        batch_op.create_index('idx_pinned_conversation_conversation', ['app_id', 'conversation_id', 'created_by'],
                              unique=False)

    op.create_table('providers',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('provider_name', sa.String(length=40), nullable=False, comment='提供方名字'),
                    sa.Column('provider_type', sa.String(length=40), nullable=False,
                              server_default=sa.text("'custom'"), comment='提供方类型'),
                    sa.Column('encrypted_config', sa.String(length=1024), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='加密配置'),
                    sa.Column('is_valid', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否有效'),
                    sa.Column('last_used', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='最后使用时间'),
                    sa.Column('quota_type', sa.String(length=40), nullable=True,
                              server_default=sqltype.empty_text(), comment='配额类型'),
                    sa.Column('quota_limit', sa.Integer(), nullable=True, server_default=sa.text('0'),
                              comment='配额限额'),
                    sa.Column('quota_used', sa.Integer(), nullable=True, server_default=sa.text('0'),
                              comment='已使用的配额'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='provider_pkey'),
                    sa.UniqueConstraint('tenant_id', 'provider_name', 'provider_type', 'quota_type',
                                        name='unq_provider_name_type_quota')
                    )
    with op.batch_alter_table('providers', schema=None) as batch_op:
        batch_op.create_index('idx_provider_tenant_id_provider', ['tenant_id', 'provider_name'], unique=False)

    op.create_table('recommended_apps',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('description', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='描述'),
                    sa.Column('copyright', sa.String(length=255), nullable=False, comment='版权信息'),
                    sa.Column('privacy_policy', sa.String(length=255), nullable=False, comment='隐私政策'),
                    sa.Column('category', sa.String(length=255), nullable=False, comment='应用类别'),
                    sa.Column('position', sa.Integer(), nullable=False, comment='应用位置'),
                    sa.Column('is_listed', sa.Boolean(), nullable=False, comment='是否被列出'),
                    sa.Column('install_count', sa.Integer(), nullable=False, comment='安装次数'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='recommended_app_pkey')
                    )
    with op.batch_alter_table('recommended_apps', schema=None) as batch_op:
        batch_op.create_index('idx_recommended_app_app_id', ['app_id'], unique=False)
        batch_op.create_index('idx_recommended_app_is_listed', ['is_listed'], unique=False)

    op.create_table('saved_messages',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('message_id', UUID(), nullable=False, comment='消息ID'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建者ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.PrimaryKeyConstraint('id', name='saved_message_pkey')
                    )
    with op.batch_alter_table('saved_messages', schema=None) as batch_op:
        batch_op.create_index('idx_saved_message_message', ['app_id', 'message_id', 'created_by'], unique=False)

    op.create_table('sites',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('title', sa.String(length=255), nullable=False, comment='网站标题'),
                    sa.Column('icon', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='网站图标'),
                    sa.Column('icon_background', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='图标背景'),
                    sa.Column('description', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='描述'),
                    sa.Column('default_language', sa.String(length=255), nullable=False, comment='默认语言'),
                    sa.Column('copyright', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='版权信息'),
                    sa.Column('privacy_policy', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='隐私策略'),
                    sa.Column('customize_domain', sa.String(length=255), nullable=True,
                              server_default=sqltype.empty_text(), comment='自定义域名'),
                    sa.Column('customize_token_strategy', sa.String(length=255), nullable=False,
                              comment='自定义令牌策略'),
                    sa.Column('prompt_public', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='公共提示'),
                    sa.Column('status', sa.String(length=255), server_default=sa.text("'normal'"),
                              nullable=False, comment='网站状态'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.Column('code', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='代码'),
                    sa.PrimaryKeyConstraint('id', name='site_pkey')
                    )
    with op.batch_alter_table('sites', schema=None) as batch_op:
        batch_op.create_index('idx_site_app_id', ['app_id'], unique=False)
        batch_op.create_index('idx_site_code', ['code', 'status'], unique=False)

    op.create_table('tenant_account_joins',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('account_id', UUID(), nullable=False, comment='账号ID'),
                    sa.Column('role', sa.String(length=16), server_default='normal', nullable=False, comment='角色'),
                    sa.Column('invited_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='邀请人'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='tenant_account_join_pkey'),
                    sa.UniqueConstraint('tenant_id', 'account_id', name='unq_tenant_account_join')
                    )
    with op.batch_alter_table('tenant_account_joins', schema=None) as batch_op:
        batch_op.create_index('idx_tenant_account_join_account_id', ['account_id'], unique=False)
        batch_op.create_index('idx_tenant_account_join_tenant_id', ['tenant_id'], unique=False)

    op.create_table('tenants',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='名称'),
                    sa.Column('encrypt_public_key', sa.String(length=4096), nullable=True,
                              server_default=sqltype.empty_text(),
                              comment='公钥'),
                    sa.Column('plan', sa.String(length=255), server_default=sa.text("'basic'"),
                              nullable=False, comment='计划'),
                    sa.Column('status', sa.String(length=255), server_default=sa.text("'normal'"),
                              nullable=False, comment='状态'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='tenant_pkey')
                    )
    op.create_table('upload_files',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('tenant_id', UUID(), nullable=False, comment='租户ID'),
                    sa.Column('storage_type', sa.String(length=255), nullable=False, comment='存储类型'),
                    sa.Column('key', sa.String(length=255), nullable=False, comment='文件key'),
                    sa.Column('name', sa.String(length=255), nullable=False, comment='文件名称'),
                    sa.Column('size', sa.Integer(), nullable=False, comment='文件大小'),
                    sa.Column('extension', sa.String(length=255), nullable=False, comment='文件扩展名'),
                    sa.Column('mime_type', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='MIME类型'),
                    sa.Column('created_by', UUID(), nullable=False, comment='创建者ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('used', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否使用'),
                    sa.Column('used_by', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='使用者ID'),
                    sa.Column('used_at', sa.DateTime(), nullable=True, server_default=sqltype.invalid_time(),
                              comment='使用时间'),
                    sa.Column('hash', sa.String(length=255), nullable=True, server_default=sqltype.empty_text(),
                              comment='hash'),
                    sa.PrimaryKeyConstraint('id', name='upload_file_pkey')
                    )
    with op.batch_alter_table('upload_files', schema=None) as batch_op:
        batch_op.create_index('idx_upload_file_tenant', ['tenant_id'], unique=False)

    op.create_table('message_annotations',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('conversation_id', UUID(), nullable=False, comment='会话ID'),
                    sa.Column('message_id', UUID(), nullable=False, comment='消息ID'),
                    sa.Column('content', sa.String(length=4096), nullable=False, comment='消息内容'),
                    sa.Column('account_id', UUID(), nullable=False, comment='账号ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.PrimaryKeyConstraint('id', name='message_annotation_pkey')
                    )
    with op.batch_alter_table('message_annotations', schema=None) as batch_op:
        batch_op.create_index('idx_message_annotation_app', ['app_id'], unique=False)
        batch_op.create_index('idx_message_annotation_conversation', ['conversation_id'], unique=False)
        batch_op.create_index('idx_message_annotation_message', ['message_id'], unique=False)

    op.create_table('messages',
                    sa.Column('id', UUID(), nullable=False, comment='ID'),
                    sa.Column('app_id', UUID(), nullable=False, comment='应用ID'),
                    sa.Column('model_provider', sa.String(length=255), nullable=False, comment='模型提供方'),
                    sa.Column('model_id', sa.String(length=255), nullable=False, comment='模型ID'),
                    sa.Column('override_model_configs', sa.JSON(), nullable=True, comment='模型配置重写'),
                    sa.Column('conversation_id', UUID(), nullable=False, comment='对话ID'),
                    sa.Column('inputs', sa.JSON(), nullable=True, comment='输入'),
                    sa.Column('query', sa.String(length=4096), nullable=False, comment='查询'),
                    sa.Column('message', sa.JSON(), nullable=False, comment='消息'),
                    sa.Column('message_tokens', sa.Integer(), server_default=sa.text('0'), nullable=False,
                              comment='消息token数量'),
                    sa.Column('message_unit_price', sa.Numeric(precision=10, scale=4), nullable=False,
                              server_default=sa.text('0'), comment='消息单价'),
                    sa.Column('answer', sa.String(length=4096), nullable=False, comment='回答'),
                    sa.Column('answer_tokens', sa.Integer(), server_default=sa.text('0'), nullable=False,
                              comment='回答token数量'),
                    sa.Column('answer_unit_price', sa.Numeric(precision=10, scale=4), nullable=False,
                              server_default=sa.text('0'), comment='回答单价'),
                    sa.Column('provider_response_latency', sa.Float(), server_default=sa.text('0'), nullable=False,
                              comment='延迟'),
                    sa.Column('total_price', sa.Numeric(precision=10, scale=7), nullable=True,
                              server_default=sa.text('0'), comment='总价'),
                    sa.Column('currency', sa.String(length=255), nullable=False, comment='货币'),
                    sa.Column('from_source', sa.String(length=255), nullable=False, comment='来源'),
                    sa.Column('from_end_user_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='终端用户ID'),
                    sa.Column('from_account_id', UUID(), nullable=True, server_default=sqltype.empty_text(),
                              comment='账号ID'),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='创建时间'),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP(0)'),
                              nullable=False, comment='更新时间'),
                    sa.Column('agent_based', sa.Boolean(), server_default=sa.text('false'), nullable=False,
                              comment='是否基于代理'),
                    sa.PrimaryKeyConstraint('id', name='message_pkey')
                    )
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.create_index('idx_message_account', ['app_id', 'from_source', 'from_account_id'], unique=False)
        batch_op.create_index('idx_message_app_id', ['app_id', 'created_at'], unique=False)
        batch_op.create_index('idx_message_conversation_id', ['conversation_id'], unique=False)
        batch_op.create_index('idx_message_end_user', ['app_id', 'from_source', 'from_end_user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.drop_index('message_end_user_idx')
        batch_op.drop_index('message_conversation_id_idx')
        batch_op.drop_index('message_app_id_idx')
        batch_op.drop_index('message_account_idx')

    op.drop_table('messages')
    with op.batch_alter_table('message_annotations', schema=None) as batch_op:
        batch_op.drop_index('message_annotation_message_idx')
        batch_op.drop_index('message_annotation_conversation_idx')
        batch_op.drop_index('message_annotation_app_idx')

    op.drop_table('message_annotations')
    with op.batch_alter_table('upload_files', schema=None) as batch_op:
        batch_op.drop_index('upload_file_tenant_idx')

    op.drop_table('upload_files')
    op.drop_table('tenants')
    with op.batch_alter_table('tenant_account_joins', schema=None) as batch_op:
        batch_op.drop_index('tenant_account_join_tenant_id_idx')
        batch_op.drop_index('tenant_account_join_account_id_idx')

    op.drop_table('tenant_account_joins')
    with op.batch_alter_table('sites', schema=None) as batch_op:
        batch_op.drop_index('site_code_idx')
        batch_op.drop_index('site_app_id_idx')

    op.drop_table('sites')
    with op.batch_alter_table('saved_messages', schema=None) as batch_op:
        batch_op.drop_index('saved_message_message_idx')

    op.drop_table('saved_messages')
    with op.batch_alter_table('recommended_apps', schema=None) as batch_op:
        batch_op.drop_index('recommended_app_is_listed_idx')
        batch_op.drop_index('recommended_app_app_id_idx')

    op.drop_table('recommended_apps')
    with op.batch_alter_table('providers', schema=None) as batch_op:
        batch_op.drop_index('provider_tenant_id_provider_idx')

    op.drop_table('providers')
    with op.batch_alter_table('pinned_conversations', schema=None) as batch_op:
        batch_op.drop_index('pinned_conversation_conversation_idx')

    op.drop_table('pinned_conversations')
    with op.batch_alter_table('operation_logs', schema=None) as batch_op:
        batch_op.drop_index('operation_log_account_action_idx')

    op.drop_table('operation_logs')
    with op.batch_alter_table('message_feedbacks', schema=None) as batch_op:
        batch_op.drop_index('message_feedback_message_idx')
        batch_op.drop_index('message_feedback_conversation_idx')
        batch_op.drop_index('message_feedback_app_idx')

    op.drop_table('message_feedbacks')
    with op.batch_alter_table('message_chains', schema=None) as batch_op:
        batch_op.drop_index('message_chain_message_id_idx')

    op.drop_table('message_chains')
    with op.batch_alter_table('message_agent_thoughts', schema=None) as batch_op:
        batch_op.drop_index('message_agent_thought_message_id_idx')
        batch_op.drop_index('message_agent_thought_message_chain_id_idx')

    op.drop_table('message_agent_thoughts')
    with op.batch_alter_table('invitation_codes', schema=None) as batch_op:
        batch_op.drop_index('invitation_codes_code_idx')
        batch_op.drop_index('invitation_codes_batch_idx')

    op.drop_table('invitation_codes')
    with op.batch_alter_table('installed_apps', schema=None) as batch_op:
        batch_op.drop_index('installed_app_tenant_id_idx')
        batch_op.drop_index('installed_app_app_id_idx')

    op.drop_table('installed_apps')
    with op.batch_alter_table('end_users', schema=None) as batch_op:
        batch_op.drop_index('end_user_tenant_session_id_idx')
        batch_op.drop_index('end_user_session_id_idx')

    op.drop_table('end_users')
    op.drop_table('embeddings')
    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.drop_index('document_is_paused_idx')
        batch_op.drop_index('document_dataset_id_idx')

    op.drop_table('documents')
    with op.batch_alter_table('document_segments', schema=None) as batch_op:
        batch_op.drop_index('document_segment_tenant_document_idx')
        batch_op.drop_index('document_segment_tenant_dataset_idx')
        batch_op.drop_index('document_segment_document_id_idx')
        batch_op.drop_index('document_segment_dataset_node_idx')
        batch_op.drop_index('document_segment_dataset_id_idx')

    op.drop_table('document_segments')
    op.drop_table('dify_setups')
    with op.batch_alter_table('datasets', schema=None) as batch_op:
        batch_op.drop_index('dataset_tenant_idx')

    op.drop_table('datasets')
    with op.batch_alter_table('dataset_queries', schema=None) as batch_op:
        batch_op.drop_index('dataset_query_dataset_id_idx')

    op.drop_table('dataset_queries')
    with op.batch_alter_table('dataset_process_rules', schema=None) as batch_op:
        batch_op.drop_index('dataset_process_rule_dataset_id_idx')

    op.drop_table('dataset_process_rules')
    with op.batch_alter_table('dataset_keyword_tables', schema=None) as batch_op:
        batch_op.drop_index('dataset_keyword_table_dataset_id_idx')

    op.drop_table('dataset_keyword_tables')
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_index('conversation_app_from_user_idx')

    op.drop_table('conversations')
    op.drop_table('celery_tasksetmeta')
    op.drop_table('celery_taskmeta')

    op.execute('DROP SEQUENCE taskset_id_sequence;')
    op.execute('DROP SEQUENCE task_id_sequence;')
    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.drop_index('app_tenant_id_idx')

    op.drop_table('apps')
    with op.batch_alter_table('app_model_configs', schema=None) as batch_op:
        batch_op.drop_index('app_app_id_idx')

    op.drop_table('app_model_configs')
    with op.batch_alter_table('app_dataset_joins', schema=None) as batch_op:
        batch_op.drop_index('app_dataset_join_app_dataset_idx')

    op.drop_table('app_dataset_joins')
    with op.batch_alter_table('api_tokens', schema=None) as batch_op:
        batch_op.drop_index('api_token_token_idx')
        batch_op.drop_index('api_token_app_id_type_idx')

    op.drop_table('api_tokens')
    with op.batch_alter_table('api_requests', schema=None) as batch_op:
        batch_op.drop_index('api_request_token_idx')

    op.drop_table('api_requests')
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.drop_index('account_email_idx')

    op.drop_table('accounts')
    op.drop_table('account_integrates')

    op.execute('DROP EXTENSION IF EXISTS "uuid-ossp";')
    # ### end Alembic commands ###
